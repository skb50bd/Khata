// <auto-generated />
using System;
using Khata.Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Khata.Data.Migrations
{
    [DbContext(typeof(KhataContext))]
    [Migration("20181226160330_AddedNoteFieldToCustomerTable")]
    partial class AddedNoteFieldToCustomerTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Khata.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<decimal>("Balance");

                    b.Property<string>("CompanyName");

                    b.Property<decimal>("Debt");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsRemoved");

                    b.Property<string>("LastName");

                    b.Property<string>("Note");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Khata.Domain.DebtPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId");

                    b.Property<bool>("IsRemoved");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("DebtPayment");
                });

            modelBuilder.Entity("Khata.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("IsRemoved");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<string>("Unit");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Great Budget Phone",
                            IsRemoved = false,
                            Name = "Nokia 1100"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Killer Phone",
                            IsRemoved = false,
                            Name = "Moto 360"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Show you what we can do.",
                            IsRemoved = false,
                            Name = "Nokia X6"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Awesome Battery Life",
                            IsRemoved = false,
                            Name = "Moto Z Play"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Thought you'd never have something like it?",
                            IsRemoved = false,
                            Name = "Moto X Play"
                        },
                        new
                        {
                            Id = 6,
                            Description = "You're gonna miss it when its gone.",
                            IsRemoved = false,
                            Name = "Nokia 3310"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Feel the power in you palm.",
                            IsRemoved = false,
                            Name = "Samsung Galaxy S9+"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Cool, innit?",
                            IsRemoved = false,
                            Name = "OnePlus 6T"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Cause OnePlus 3S would be dumb.",
                            IsRemoved = false,
                            Name = "OnePlus 3T"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Ya didnot expect that, did ya?",
                            IsRemoved = false,
                            Name = "OnePlus 5"
                        },
                        new
                        {
                            Id = 11,
                            Description = "May the force be with you.",
                            IsRemoved = false,
                            Name = "Moto Z3 Force"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Feel the Life",
                            IsRemoved = false,
                            Name = "Okapia Life"
                        },
                        new
                        {
                            Id = 13,
                            Description = "You know it's good, cause it's waterproof!",
                            IsRemoved = false,
                            Name = "Sony Xperia Z"
                        },
                        new
                        {
                            Id = 14,
                            Description = "When being water resistant is not enough ;)",
                            IsRemoved = false,
                            Name = "Sony Xperia Z2"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Hello! Is it me you're looking for?",
                            IsRemoved = false,
                            Name = "Sony Xperia Z5 Premium"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Innovation at your fingertips.",
                            IsRemoved = false,
                            Name = "Sony Xperia Sola"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Keep the handy qwerty pad!",
                            IsRemoved = false,
                            Name = "Sony Xperia Ray"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Made by Google!",
                            IsRemoved = false,
                            Name = "Google Pixel"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Convinced by the camera!",
                            IsRemoved = false,
                            Name = "Google Pixel 2"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Unstoppable growth!",
                            IsRemoved = false,
                            Name = "Google Pixel 3"
                        },
                        new
                        {
                            Id = 21,
                            Description = "It's apple!",
                            IsRemoved = false,
                            Name = "Apple iPhone X"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Cause we need more money!",
                            IsRemoved = false,
                            Name = "Apple iPhone X Max"
                        });
                });

            modelBuilder.Entity("Khata.Domain.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId");

                    b.Property<bool>("IsRemoved");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("Khata.Domain.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsRemoved");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Khata.Domain.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<byte[]>("Avatar");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("Role");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Khata.Domain.Customer", b =>
                {
                    b.OwnsOne("Khata.Domain.Metadata", "Metadata", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTimeOffset>("CreationTime");

                            b1.Property<string>("Creator");

                            b1.Property<DateTimeOffset>("ModificationTime");

                            b1.Property<string>("Modifier");

                            b1.HasKey("Id");

                            b1.ToTable("Customers");

                            b1.HasOne("Khata.Domain.Customer")
                                .WithOne("Metadata")
                                .HasForeignKey("Khata.Domain.Metadata", "Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Khata.Domain.DebtPayment", b =>
                {
                    b.HasOne("Khata.Domain.Customer", "Customer")
                        .WithMany("DebtPayments")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Khata.Domain.Product", b =>
                {
                    b.OwnsOne("Khata.Domain.Inventory", "Inventory", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<decimal>("AlertAt");

                            b1.Property<decimal>("Stock");

                            b1.Property<decimal>("Warehouse");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.HasOne("Khata.Domain.Product")
                                .WithOne("Inventory")
                                .HasForeignKey("Khata.Domain.Inventory", "ProductId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasData(
                                new
                                {
                                    ProductId = 1,
                                    AlertAt = 10m,
                                    Stock = 5m,
                                    Warehouse = 0m
                                },
                                new
                                {
                                    ProductId = 2,
                                    AlertAt = 10m,
                                    Stock = 15m,
                                    Warehouse = 10m
                                },
                                new
                                {
                                    ProductId = 3,
                                    AlertAt = 10000m,
                                    Stock = 55m,
                                    Warehouse = 550m
                                },
                                new
                                {
                                    ProductId = 4,
                                    AlertAt = 10m,
                                    Stock = 0m,
                                    Warehouse = 0m
                                },
                                new
                                {
                                    ProductId = 5,
                                    AlertAt = 10m,
                                    Stock = 18m,
                                    Warehouse = 40m
                                },
                                new
                                {
                                    ProductId = 6,
                                    AlertAt = 5m,
                                    Stock = 0m,
                                    Warehouse = 5m
                                },
                                new
                                {
                                    ProductId = 7,
                                    AlertAt = 1000m,
                                    Stock = 15m,
                                    Warehouse = 550m
                                },
                                new
                                {
                                    ProductId = 8,
                                    AlertAt = 18m,
                                    Stock = 20m,
                                    Warehouse = 5m
                                },
                                new
                                {
                                    ProductId = 9,
                                    AlertAt = 3m,
                                    Stock = 3m,
                                    Warehouse = 3m
                                },
                                new
                                {
                                    ProductId = 10,
                                    AlertAt = 80m,
                                    Stock = 6m,
                                    Warehouse = 7m
                                },
                                new
                                {
                                    ProductId = 11,
                                    AlertAt = 100m,
                                    Stock = 6m,
                                    Warehouse = 0m
                                },
                                new
                                {
                                    ProductId = 12,
                                    AlertAt = 100m,
                                    Stock = 0m,
                                    Warehouse = 0m
                                },
                                new
                                {
                                    ProductId = 13,
                                    AlertAt = 10m,
                                    Stock = 6m,
                                    Warehouse = 0m
                                },
                                new
                                {
                                    ProductId = 14,
                                    AlertAt = 10m,
                                    Stock = 5m,
                                    Warehouse = 0m
                                },
                                new
                                {
                                    ProductId = 15,
                                    AlertAt = 10m,
                                    Stock = 5m,
                                    Warehouse = 20m
                                },
                                new
                                {
                                    ProductId = 16,
                                    AlertAt = 9m,
                                    Stock = 16m,
                                    Warehouse = 16m
                                },
                                new
                                {
                                    ProductId = 17,
                                    AlertAt = 101m,
                                    Stock = 51m,
                                    Warehouse = 1011m
                                },
                                new
                                {
                                    ProductId = 18,
                                    AlertAt = 100m,
                                    Stock = 51m,
                                    Warehouse = 50m
                                },
                                new
                                {
                                    ProductId = 19,
                                    AlertAt = 80m,
                                    Stock = 61m,
                                    Warehouse = 11m
                                },
                                new
                                {
                                    ProductId = 20,
                                    AlertAt = 30m,
                                    Stock = 15m,
                                    Warehouse = 10m
                                },
                                new
                                {
                                    ProductId = 21,
                                    AlertAt = 100m,
                                    Stock = 50m,
                                    Warehouse = 0m
                                },
                                new
                                {
                                    ProductId = 22,
                                    AlertAt = 10m,
                                    Stock = 3m,
                                    Warehouse = 3m
                                });
                        });

                    b.OwnsOne("Khata.Domain.Pricing", "Price", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<decimal>("Bulk");

                            b1.Property<decimal>("Margin");

                            b1.Property<decimal>("Purchase");

                            b1.Property<decimal>("Retail");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.HasOne("Khata.Domain.Product")
                                .WithOne("Price")
                                .HasForeignKey("Khata.Domain.Pricing", "ProductId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasData(
                                new
                                {
                                    ProductId = 1,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 2,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 3,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 4,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 5,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 6,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 7,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 8,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 9,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 10,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 11,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 12,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 13,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 14,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 15,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 16,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 17,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 18,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 19,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 20,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 21,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                },
                                new
                                {
                                    ProductId = 22,
                                    Bulk = 1850m,
                                    Margin = 1600m,
                                    Purchase = 1500m,
                                    Retail = 2000m
                                });
                        });

                    b.OwnsOne("Khata.Domain.Metadata", "Metadata", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTimeOffset>("CreationTime");

                            b1.Property<string>("Creator");

                            b1.Property<DateTimeOffset>("ModificationTime");

                            b1.Property<string>("Modifier");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.HasOne("Khata.Domain.Product")
                                .WithOne("Metadata")
                                .HasForeignKey("Khata.Domain.Metadata", "Id")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 771, DateTimeKind.Unspecified).AddTicks(7975), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(1612), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 2,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4575), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4586), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 3,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4609), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4610), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 4,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4612), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4613), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 5,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4614), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4616), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 6,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4618), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4619), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 7,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4620), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4621), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 8,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4623), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4624), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 9,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4625), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4626), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 10,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4628), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4629), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 11,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4630), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4631), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 12,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4633), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4634), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 13,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4635), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4636), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 14,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4638), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4639), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 15,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4640), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4642), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 16,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4643), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4644), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 17,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4646), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4647), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 18,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4648), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4649), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 19,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4651), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4652), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 20,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4653), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4654), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 21,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4656), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4657), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                },
                                new
                                {
                                    Id = 22,
                                    CreationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4658), new TimeSpan(0, 6, 0, 0, 0)),
                                    Creator = "admin",
                                    ModificationTime = new DateTimeOffset(new DateTime(2018, 12, 26, 22, 3, 29, 775, DateTimeKind.Unspecified).AddTicks(4659), new TimeSpan(0, 6, 0, 0, 0)),
                                    Modifier = "admin"
                                });
                        });
                });

            modelBuilder.Entity("Khata.Domain.Sale", b =>
                {
                    b.HasOne("Khata.Domain.Customer", "Customer")
                        .WithMany("Purchases")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Khata.Domain.Service", b =>
                {
                    b.OwnsOne("Khata.Domain.Metadata", "Metadata", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTimeOffset>("CreationTime");

                            b1.Property<string>("Creator");

                            b1.Property<DateTimeOffset>("ModificationTime");

                            b1.Property<string>("Modifier");

                            b1.HasKey("Id");

                            b1.ToTable("Services");

                            b1.HasOne("Khata.Domain.Service")
                                .WithOne("Metadata")
                                .HasForeignKey("Khata.Domain.Metadata", "Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
