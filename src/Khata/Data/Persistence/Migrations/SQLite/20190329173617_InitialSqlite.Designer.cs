// <auto-generated />
using System;
using Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Persistence.Migrations.SQLite
{
    [DbContext(typeof(KhataContext))]
    [Migration("20190329173617_InitialSqlite")]
    partial class InitialSqlite
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("Domain.CashRegister", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int?>("MetadataId");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("CashRegister");
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CompanyName");

                    b.Property<decimal>("Debt")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsRemoved");

                    b.Property<string>("LastName");

                    b.Property<int?>("MetadataId");

                    b.Property<string>("Note");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.DebtPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("CustomerId");

                    b.Property<decimal>("DebtBefore")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description");

                    b.Property<int>("InvoiceId");

                    b.Property<bool>("IsRemoved");

                    b.Property<int?>("MetadataId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("MetadataId");

                    b.ToTable("DebtPayments");
                });

            modelBuilder.Entity("Domain.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description");

                    b.Property<int?>("MetadataId");

                    b.Property<int?>("RowId");

                    b.Property<string>("TableName");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("Domain.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Designation");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsRemoved");

                    b.Property<string>("LastName");

                    b.Property<int?>("MetadataId");

                    b.Property<string>("NIdNumber");

                    b.Property<string>("Note");

                    b.Property<string>("Phone");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Domain.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description");

                    b.Property<bool>("IsRemoved");

                    b.Property<int?>("MetadataId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Date");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsRemoved");

                    b.Property<int?>("MetadataId");

                    b.Property<decimal>("PaymentDiscountCash")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("PaymentPaid")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("PaymentSubtotal")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("PreviousDue")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Invoice");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Invoice");
                });

            modelBuilder.Entity("Domain.Metadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreationTime");

                    b.Property<string>("Creator");

                    b.Property<DateTimeOffset>("ModificationTime");

                    b.Property<string>("Modifier");

                    b.HasKey("Id");

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("Domain.Outlet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Email");

                    b.Property<bool>("IsRemoved");

                    b.Property<int?>("MetadataId");

                    b.Property<string>("Phone");

                    b.Property<string>("Slogan");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Outlets");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsRemoved");

                    b.Property<int?>("MetadataId");

                    b.Property<string>("Name");

                    b.Property<int>("OutletId");

                    b.Property<string>("Unit");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("OutletId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsRemoved");

                    b.Property<int?>("MetadataId");

                    b.Property<DateTimeOffset>("PurchaseDate");

                    b.Property<int>("SupplierId");

                    b.Property<int>("VoucharId");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("VoucharId")
                        .IsUnique();

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Domain.PurchaseLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("ProductId");

                    b.Property<int?>("PurchaseId");

                    b.Property<int?>("PurchaseReturnId");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("UnitPurchasePrice")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("PurchaseReturnId");

                    b.ToTable("PurchaseLineItem");
                });

            modelBuilder.Entity("Domain.PurchaseReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("CashBack")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("DebtRollback")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description");

                    b.Property<bool>("IsRemoved");

                    b.Property<int?>("MetadataId");

                    b.Property<int>("PurchaseId");

                    b.Property<int>("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("PurchaseId")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseReturns");
                });

            modelBuilder.Entity("Domain.Refund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("CashBack")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("CustomerId");

                    b.Property<decimal>("DebtRollback")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description");

                    b.Property<bool>("IsRemoved");

                    b.Property<int?>("MetadataId");

                    b.Property<int>("SaleId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MetadataId");

                    b.HasIndex("SaleId")
                        .IsUnique();

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("Domain.SalaryIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("IsRemoved");

                    b.Property<int?>("MetadataId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MetadataId");

                    b.ToTable("SalaryIssues");
                });

            modelBuilder.Entity("Domain.SalaryPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("IsRemoved");

                    b.Property<int?>("MetadataId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MetadataId");

                    b.ToTable("SalaryPayments");
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<string>("Description");

                    b.Property<int>("InvoiceId");

                    b.Property<bool>("IsRemoved");

                    b.Property<int?>("MetadataId");

                    b.Property<int>("OutletId");

                    b.Property<DateTimeOffset>("SaleDate");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("MetadataId");

                    b.HasIndex("OutletId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Domain.SaleLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ItemId");

                    b.Property<string>("Name");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int?>("RefundId");

                    b.Property<int?>("SaleId");

                    b.Property<int?>("SavedSaleId");

                    b.Property<int>("Type");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("UnitPurchasePrice")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("RefundId");

                    b.HasIndex("SaleId");

                    b.HasIndex("SavedSaleId");

                    b.ToTable("SaleLineItem");
                });

            modelBuilder.Entity("Domain.SavedSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsRemoved");

                    b.Property<int?>("MetadataId");

                    b.Property<int>("OutletId");

                    b.Property<DateTimeOffset>("SaleDate");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("SavedSales");
                });

            modelBuilder.Entity("Domain.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsRemoved");

                    b.Property<int?>("MetadataId");

                    b.Property<string>("Name");

                    b.Property<int>("OutletId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("OutletId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CompanyName");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsRemoved");

                    b.Property<string>("LastName");

                    b.Property<int?>("MetadataId");

                    b.Property<string>("Note");

                    b.Property<decimal>("Payable")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Domain.SupplierPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description");

                    b.Property<bool>("IsRemoved");

                    b.Property<int?>("MetadataId");

                    b.Property<decimal>("PayableBefore")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("SupplierId");

                    b.Property<int>("VoucharId");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("VoucharId")
                        .IsUnique();

                    b.ToTable("SupplierPayments");
                });

            modelBuilder.Entity("Domain.Withdrawal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description");

                    b.Property<int?>("MetadataId");

                    b.Property<int?>("RowId");

                    b.Property<string>("TableName");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Withdrawals");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.CustomerInvoice", b =>
                {
                    b.HasBaseType("Domain.Invoice");

                    b.Property<int>("CustomerId");

                    b.Property<int?>("DebtPaymentId");

                    b.Property<int?>("OutletId");

                    b.Property<int?>("SaleId");

                    b.Property<int?>("Type");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OutletId");

                    b.HasDiscriminator().HasValue("CustomerInvoice");
                });

            modelBuilder.Entity("Domain.Vouchar", b =>
                {
                    b.HasBaseType("Domain.Invoice");

                    b.Property<int?>("PurchaseId");

                    b.Property<int>("SupplierId");

                    b.Property<int?>("SupplierPaymentId");

                    b.HasIndex("SupplierId");

                    b.HasDiscriminator().HasValue("Vouchar");
                });

            modelBuilder.Entity("Domain.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<byte[]>("Avatar");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("Role");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Domain.CashRegister", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");
                });

            modelBuilder.Entity("Domain.DebtPayment", b =>
                {
                    b.HasOne("Domain.Customer", "Customer")
                        .WithMany("DebtPayments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.CustomerInvoice", "Invoice")
                        .WithOne("DebtPayment")
                        .HasForeignKey("Domain.DebtPayment", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");
                });

            modelBuilder.Entity("Domain.Deposit", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");
                });

            modelBuilder.Entity("Domain.Employee", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");
                });

            modelBuilder.Entity("Domain.Expense", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.OwnsMany("Domain.InvoiceLineItem", "Cart", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<int>("InvoiceId");

                            b1.Property<string>("Name");

                            b1.Property<decimal>("NetPrice")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Quantity")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("UnitPrice")
                                .HasColumnType("decimal(18, 6)");

                            b1.HasKey("Id");

                            b1.HasIndex("InvoiceId");

                            b1.ToTable("InvoiceLineItem");

                            b1.HasOne("Domain.Invoice")
                                .WithMany("Cart")
                                .HasForeignKey("InvoiceId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.Outlet", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("Domain.Outlet", "Outlet")
                        .WithMany("Products")
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Domain.Inventory", "Inventory", b1 =>
                        {
                            b1.Property<int>("ProductId");

                            b1.Property<decimal>("AlertAt")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Stock")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Warehouse")
                                .HasColumnType("decimal(18, 6)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.HasOne("Domain.Product")
                                .WithOne("Inventory")
                                .HasForeignKey("Domain.Inventory", "ProductId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Domain.Pricing", "Price", b1 =>
                        {
                            b1.Property<int>("ProductId");

                            b1.Property<decimal>("Bulk")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Margin")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Purchase")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Retail")
                                .HasColumnType("decimal(18, 6)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.HasOne("Domain.Product")
                                .WithOne("Price")
                                .HasForeignKey("Domain.Pricing", "ProductId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.Purchase", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("Domain.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Vouchar", "Vouchar")
                        .WithOne("Purchase")
                        .HasForeignKey("Domain.Purchase", "VoucharId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Domain.PaymentInfo", "Payment", b1 =>
                        {
                            b1.Property<int>("PurchaseId");

                            b1.Property<decimal>("DiscountCash")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Paid")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("SubTotal")
                                .HasColumnType("decimal(18, 6)");

                            b1.HasKey("PurchaseId");

                            b1.ToTable("Purchases");

                            b1.HasOne("Domain.Purchase")
                                .WithOne("Payment")
                                .HasForeignKey("Domain.PaymentInfo", "PurchaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.PurchaseLineItem", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Purchase")
                        .WithMany("Cart")
                        .HasForeignKey("PurchaseId");

                    b.HasOne("Domain.PurchaseReturn")
                        .WithMany("Cart")
                        .HasForeignKey("PurchaseReturnId");
                });

            modelBuilder.Entity("Domain.PurchaseReturn", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("Domain.Purchase", "Purchase")
                        .WithOne()
                        .HasForeignKey("Domain.PurchaseReturn", "PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Supplier", "Supplier")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Refund", b =>
                {
                    b.HasOne("Domain.Customer", "Customer")
                        .WithMany("Refunds")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("Domain.Sale", "Sale")
                        .WithOne()
                        .HasForeignKey("Domain.Refund", "SaleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.SalaryIssue", b =>
                {
                    b.HasOne("Domain.Employee", "Employee")
                        .WithMany("SalaryIssues")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");
                });

            modelBuilder.Entity("Domain.SalaryPayment", b =>
                {
                    b.HasOne("Domain.Employee", "Employee")
                        .WithMany("SalaryPayments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.HasOne("Domain.Customer", "Customer")
                        .WithMany("Purchases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.CustomerInvoice", "Invoice")
                        .WithOne("Sale")
                        .HasForeignKey("Domain.Sale", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("Domain.Outlet", "Outlet")
                        .WithMany("Sales")
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Domain.PaymentInfo", "Payment", b1 =>
                        {
                            b1.Property<int>("SaleId");

                            b1.Property<decimal>("DiscountCash")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Paid")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("SubTotal")
                                .HasColumnType("decimal(18, 6)");

                            b1.HasKey("SaleId");

                            b1.ToTable("Sales");

                            b1.HasOne("Domain.Sale")
                                .WithOne("Payment")
                                .HasForeignKey("Domain.PaymentInfo", "SaleId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.SaleLineItem", b =>
                {
                    b.HasOne("Domain.Refund")
                        .WithMany("Cart")
                        .HasForeignKey("RefundId");

                    b.HasOne("Domain.Sale")
                        .WithMany("Cart")
                        .HasForeignKey("SaleId");

                    b.HasOne("Domain.SavedSale")
                        .WithMany("Cart")
                        .HasForeignKey("SavedSaleId");
                });

            modelBuilder.Entity("Domain.SavedSale", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.OwnsOne("Domain.PaymentInfo", "Payment", b1 =>
                        {
                            b1.Property<int>("SavedSaleId");

                            b1.Property<decimal>("DiscountCash")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Paid")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("SubTotal")
                                .HasColumnType("decimal(18, 6)");

                            b1.HasKey("SavedSaleId");

                            b1.ToTable("SavedSales");

                            b1.HasOne("Domain.SavedSale")
                                .WithOne("Payment")
                                .HasForeignKey("Domain.PaymentInfo", "SavedSaleId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.Service", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("Domain.Outlet", "Outlet")
                        .WithMany("Services")
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Supplier", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");
                });

            modelBuilder.Entity("Domain.SupplierPayment", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("Domain.Supplier", "Supplier")
                        .WithMany("Payments")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Vouchar", "Vouchar")
                        .WithOne("SupplierPayment")
                        .HasForeignKey("Domain.SupplierPayment", "VoucharId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Withdrawal", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.CustomerInvoice", b =>
                {
                    b.HasOne("Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId");
                });

            modelBuilder.Entity("Domain.Vouchar", b =>
                {
                    b.HasOne("Domain.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
