// <auto-generated />
using System;
using Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Persistence.Migrations.SQLite
{
    [DbContext(typeof(KhataContext))]
    [Migration("20221020195243_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0-rc.2.22472.11");

            modelBuilder.Entity("Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("BLOB");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.CashRegister", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("CashRegister");
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Debt")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.DebtPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DebtBefore")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("MetadataId");

                    b.ToTable("DebtPayments");
                });

            modelBuilder.Entity("Domain.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TableName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("Domain.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Designation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NIdNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Domain.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PaymentDiscountCash")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("PaymentPaid")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("PaymentSubtotal")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("PreviousDue")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Invoice");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Invoice");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Metadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("Domain.Outlet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Slogan")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Outlets");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("OutletId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VoucharId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("VoucharId")
                        .IsUnique();

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Domain.PurchaseLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PurchaseReturnId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("UnitPurchasePrice")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("PurchaseReturnId");

                    b.ToTable("PurchaseLineItem");
                });

            modelBuilder.Entity("Domain.PurchaseReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CashBack")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("DebtRollback")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("PurchaseId")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseReturns");
                });

            modelBuilder.Entity("Domain.Refund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CashBack")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DebtRollback")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SaleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MetadataId");

                    b.HasIndex("SaleId")
                        .IsUnique();

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("Domain.Reports.Asset", b =>
                {
                    b.Property<decimal>("Cash")
                        .HasColumnType("TEXT");

                    b.Property<int>("DueCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InventoryCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("InventoryWorth")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalDue")
                        .HasColumnType("TEXT");

                    b.ToTable((string)null);

                    b.ToView("Asset", (string)null);
                });

            modelBuilder.Entity("Domain.Reports.Inflow", b =>
                {
                    b.Property<int>("DebtPaymentCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DebtReceived")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("DepositsCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PurchaseReturnsCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PurchaseReturnsReceived")
                        .HasColumnType("TEXT");

                    b.Property<int>("SaleCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SaleProfit")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SaleReceived")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("TEXT");

                    b.ToTable((string)null);

                    b.ToView("PeriodicalInflow", (string)null);
                });

            modelBuilder.Entity("Domain.Reports.Liability", b =>
                {
                    b.Property<int>("DueCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalDue")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnpaidAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnpaidEmployees")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("Liability", (string)null);
                });

            modelBuilder.Entity("Domain.Reports.Outflow", b =>
                {
                    b.Property<decimal>("EmployeePaymentAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeePaymentCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ExpenseAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExpenseCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PurchaseCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PurchasePaid")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("RefundCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SupplierPaymentAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierPaymentCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WithdrawalAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("WithdrawalCount")
                        .HasColumnType("INTEGER");

                    b.ToTable((string)null);

                    b.ToView("PeriodicalOutflow", (string)null);
                });

            modelBuilder.Entity("Domain.Reports.Payable", b =>
                {
                    b.Property<decimal>("DebtOverPaymentAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("DebtOverPaymentCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PurchaseDueAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("PurchaseDueCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SalaryIssueAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("SalaryIssueCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("TEXT");

                    b.ToTable((string)null);

                    b.ToView("PeriodicalPayableReport", (string)null);
                });

            modelBuilder.Entity("Domain.Reports.PerDayReport", b =>
                {
                    b.Property<decimal>("CashIn")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CashOut")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NewPayable")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NewReceivable")
                        .HasColumnType("TEXT");

                    b.ToTable((string)null);

                    b.ToView("PerDayReport", (string)null);
                });

            modelBuilder.Entity("Domain.Reports.Receivable", b =>
                {
                    b.Property<DateTime>("FromDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SalaryOverPaymentAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("SalaryOverPaymentCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SalesDueAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("SalesDueCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SupplierOverPaymentAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierOverPaymentCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("TEXT");

                    b.ToTable((string)null);

                    b.ToView("PeriodicalReceivableReport", (string)null);
                });

            modelBuilder.Entity("Domain.SalaryIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MetadataId");

                    b.ToTable("SalaryIssues");
                });

            modelBuilder.Entity("Domain.SalaryPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MetadataId");

                    b.ToTable("SalaryPayments");
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("SaleDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("MetadataId");

                    b.HasIndex("OutletId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Domain.SaleLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int?>("RefundId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SaleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SavedSaleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("UnitPurchasePrice")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("RefundId");

                    b.HasIndex("SaleId");

                    b.HasIndex("SavedSaleId");

                    b.ToTable("SaleLineItem");
                });

            modelBuilder.Entity("Domain.SavedSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("SaleDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("SavedSales");
                });

            modelBuilder.Entity("Domain.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("OutletId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Payable")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Domain.SupplierPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PayableBefore")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VoucharId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("VoucharId")
                        .IsUnique();

                    b.ToTable("SupplierPayments");
                });

            modelBuilder.Entity("Domain.Withdrawal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TableName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetadataId");

                    b.ToTable("Withdrawals");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.CustomerInvoice", b =>
                {
                    b.HasBaseType("Domain.Invoice");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DebtPaymentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SaleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Type")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OutletId");

                    b.HasDiscriminator().HasValue("CustomerInvoice");
                });

            modelBuilder.Entity("Domain.Vouchar", b =>
                {
                    b.HasBaseType("Domain.Invoice");

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SupplierPaymentId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SupplierId");

                    b.HasDiscriminator().HasValue("Vouchar");
                });

            modelBuilder.Entity("Domain.CashRegister", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Domain.DebtPayment", b =>
                {
                    b.HasOne("Domain.Customer", "Customer")
                        .WithMany("DebtPayments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.CustomerInvoice", "Invoice")
                        .WithOne("DebtPayment")
                        .HasForeignKey("Domain.DebtPayment", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Domain.Deposit", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Domain.Employee", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Domain.Expense", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.OwnsMany("Domain.InvoiceLineItem", "Cart", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<int>("InvoiceId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Name")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("NetPrice")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Quantity")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("UnitPrice")
                                .HasColumnType("decimal(18, 6)");

                            b1.HasKey("Id");

                            b1.HasIndex("InvoiceId");

                            b1.ToTable("InvoiceLineItem");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.Navigation("Cart");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Domain.Outlet", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("Domain.Outlet", "Outlet")
                        .WithMany("Products")
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Domain.Inventory", "Inventory", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("AlertAt")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Stock")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Warehouse")
                                .HasColumnType("decimal(18, 6)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("Domain.Pricing", "Price", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Bulk")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Margin")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Purchase")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Retail")
                                .HasColumnType("decimal(18, 6)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Inventory");

                    b.Navigation("Metadata");

                    b.Navigation("Outlet");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("Domain.Purchase", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("Domain.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Vouchar", "Vouchar")
                        .WithOne("Purchase")
                        .HasForeignKey("Domain.Purchase", "VoucharId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Domain.PaymentInfo", "Payment", b1 =>
                        {
                            b1.Property<int>("PurchaseId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("DiscountCash")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Paid")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("SubTotal")
                                .HasColumnType("decimal(18, 6)");

                            b1.HasKey("PurchaseId");

                            b1.ToTable("Purchases");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseId");
                        });

                    b.Navigation("Metadata");

                    b.Navigation("Payment");

                    b.Navigation("Supplier");

                    b.Navigation("Vouchar");
                });

            modelBuilder.Entity("Domain.PurchaseLineItem", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Purchase", null)
                        .WithMany("Cart")
                        .HasForeignKey("PurchaseId");

                    b.HasOne("Domain.PurchaseReturn", null)
                        .WithMany("Cart")
                        .HasForeignKey("PurchaseReturnId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.PurchaseReturn", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("Domain.Purchase", "Purchase")
                        .WithOne()
                        .HasForeignKey("Domain.PurchaseReturn", "PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Supplier", "Supplier")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metadata");

                    b.Navigation("Purchase");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Domain.Refund", b =>
                {
                    b.HasOne("Domain.Customer", "Customer")
                        .WithMany("Refunds")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("Domain.Sale", "Sale")
                        .WithOne()
                        .HasForeignKey("Domain.Refund", "SaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Metadata");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Domain.SalaryIssue", b =>
                {
                    b.HasOne("Domain.Employee", "Employee")
                        .WithMany("SalaryIssues")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.Navigation("Employee");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Domain.SalaryPayment", b =>
                {
                    b.HasOne("Domain.Employee", "Employee")
                        .WithMany("SalaryPayments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.Navigation("Employee");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.HasOne("Domain.Customer", "Customer")
                        .WithMany("Purchases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.CustomerInvoice", "Invoice")
                        .WithOne("Sale")
                        .HasForeignKey("Domain.Sale", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("Domain.Outlet", "Outlet")
                        .WithMany("Sales")
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Domain.PaymentInfo", "Payment", b1 =>
                        {
                            b1.Property<int>("SaleId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("DiscountCash")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Paid")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("SubTotal")
                                .HasColumnType("decimal(18, 6)");

                            b1.HasKey("SaleId");

                            b1.ToTable("Sales");

                            b1.WithOwner()
                                .HasForeignKey("SaleId");
                        });

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("Metadata");

                    b.Navigation("Outlet");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Domain.SaleLineItem", b =>
                {
                    b.HasOne("Domain.Refund", null)
                        .WithMany("Cart")
                        .HasForeignKey("RefundId");

                    b.HasOne("Domain.Sale", null)
                        .WithMany("Cart")
                        .HasForeignKey("SaleId");

                    b.HasOne("Domain.SavedSale", null)
                        .WithMany("Cart")
                        .HasForeignKey("SavedSaleId");
                });

            modelBuilder.Entity("Domain.SavedSale", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.OwnsOne("Domain.PaymentInfo", "Payment", b1 =>
                        {
                            b1.Property<int>("SavedSaleId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("DiscountCash")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("Paid")
                                .HasColumnType("decimal(18, 6)");

                            b1.Property<decimal>("SubTotal")
                                .HasColumnType("decimal(18, 6)");

                            b1.HasKey("SavedSaleId");

                            b1.ToTable("SavedSales");

                            b1.WithOwner()
                                .HasForeignKey("SavedSaleId");
                        });

                    b.Navigation("Metadata");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Domain.Service", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("Domain.Outlet", "Outlet")
                        .WithMany("Services")
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Metadata");

                    b.Navigation("Outlet");
                });

            modelBuilder.Entity("Domain.Supplier", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Domain.SupplierPayment", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.HasOne("Domain.Supplier", "Supplier")
                        .WithMany("Payments")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Vouchar", "Vouchar")
                        .WithOne("SupplierPayment")
                        .HasForeignKey("Domain.SupplierPayment", "VoucharId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Metadata");

                    b.Navigation("Supplier");

                    b.Navigation("Vouchar");
                });

            modelBuilder.Entity("Domain.Withdrawal", b =>
                {
                    b.HasOne("Domain.Metadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.CustomerInvoice", b =>
                {
                    b.HasOne("Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId");

                    b.Navigation("Customer");

                    b.Navigation("Outlet");
                });

            modelBuilder.Entity("Domain.Vouchar", b =>
                {
                    b.HasOne("Domain.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Domain.Customer", b =>
                {
                    b.Navigation("DebtPayments");

                    b.Navigation("Purchases");

                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("Domain.Employee", b =>
                {
                    b.Navigation("SalaryIssues");

                    b.Navigation("SalaryPayments");
                });

            modelBuilder.Entity("Domain.Outlet", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Sales");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Domain.Purchase", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Domain.PurchaseReturn", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Domain.Refund", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Domain.SavedSale", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Domain.Supplier", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("PurchaseReturns");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Domain.CustomerInvoice", b =>
                {
                    b.Navigation("DebtPayment");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Domain.Vouchar", b =>
                {
                    b.Navigation("Purchase");

                    b.Navigation("SupplierPayment");
                });
#pragma warning restore 612, 618
        }
    }
}
